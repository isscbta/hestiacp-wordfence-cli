#!/bin/bash

# info: get database credentials and other basic data of domain for HestiaCP
# options: DOMAIN [SUBFOLDER]

#----------------------------------------------------------#
#                    Root check & args                    #
#----------------------------------------------------------#
if [[ "$(id -u)" -ne 0 ]]; then
    echo "You must be root to execute this script"
    exit 1
fi

DOMAIN=${1:-}
SUBFOLDER=${2:-}

if [[ -z "$DOMAIN" ]]; then
    echo "Usage: $0 DOMAIN [SUBFOLDER]"
    exit 2
fi

#----------------------------------------------------------#
#                    Load environment                      #
#----------------------------------------------------------#

# Load Hestia config 
source /etc/hestiacp/hestia.conf

# Load Hestia function libraries
source "${HESTIA}/func/main.sh"

#----------------------------------------------------------#
#                    Argument validation                   #
#----------------------------------------------------------#
# Check we have at least one argument
check_args 1 $# 'DOMAIN [SUBFOLDER]'
is_domain_format_valid "$DOMAIN"

#----------------------------------------------------------#
#                   Determine domain owner                 #
#----------------------------------------------------------#
# Use Hestia's v-search-domain-owner, specifying "web" type
USER="$("${HESTIA}/bin/v-search-domain-owner" "$DOMAIN" web)"
if [[ -z "$USER" ]]; then
    echo "Error: domain $DOMAIN does not exist"
    exit 3
fi

#----------------------------------------------------------#
#                   Locate site folder                     #
#----------------------------------------------------------#
PUBLIC_HTML='public_html'
# Detect single-user SSL (i.e. public_shtml)
if "${HESTIA}/bin/v-list-web-domain" "$USER" "$DOMAIN" | grep -qE 'SSL:.*single'; then
    PUBLIC_HTML='public_shtml'
fi

SITE_FOLDER="/home/${USER}/web/${DOMAIN}/${PUBLIC_HTML}"
if [[ -n "$SUBFOLDER" ]]; then
    SITE_FOLDER="${SITE_FOLDER}/${SUBFOLDER}"
fi

#----------------------------------------------------------#
#                   Detect CMS + config                    #
#----------------------------------------------------------#
CMS_TYPE=''
CONFIG_PATH=''

if [[ -f "${SITE_FOLDER}/wp-config.php" ]]; then
    CMS_TYPE='wordpress'
    CONFIG_PATH="${SITE_FOLDER}/wp-config.php"
elif [[ -f "${SITE_FOLDER}/configuration.php" ]]; then
    CMS_TYPE='joomla'
    CONFIG_PATH="${SITE_FOLDER}/configuration.php"
elif [[ -f "${SITE_FOLDER}/system/engine/model.php" ]] &&
     grep -q 'OpenCart' "${SITE_FOLDER}/system/engine/model.php"; then
    CMS_TYPE='opencart'
    # adjust path back to public_html
    SITE_FOLDER="$(dirname "$SITE_FOLDER")"
    CONFIG_PATH="/home/${USER}/web/${DOMAIN}/${PUBLIC_HTML}/config.php"
fi

# Extract DB info if CMS detected
if [[ -n "$CMS_TYPE" ]]; then
    case "$CMS_TYPE" in
        wordpress)
            # Use PHP to extract values to handle special characters correctly
            DATABASE_NAME=$(php -r "include('$CONFIG_PATH'); echo DB_NAME;")
            DATABASE_USERNAME=$(php -r "include('$CONFIG_PATH'); echo DB_USER;")
            DATABASE_PASSWORD=$(php -r "include('$CONFIG_PATH'); echo DB_PASSWORD;")
            DATABASE_HOSTNAME=$(php -r "include('$CONFIG_PATH'); echo DB_HOST;")
            ;;
        joomla)
            DATABASE_NAME=$(php -r "include('$CONFIG_PATH'); echo \$config->db;")
            DATABASE_USERNAME=$(php -r "include('$CONFIG_PATH'); echo \$config->user;")
            DATABASE_PASSWORD=$(php -r "include('$CONFIG_PATH'); echo \$config->password;")
            DATABASE_HOSTNAME=$(php -r "include('$CONFIG_PATH'); echo \$config->host;")
            ;;
        opencart)
            DATABASE_NAME=$(php -r "include('$CONFIG_PATH'); echo DB_DATABASE;")
            DATABASE_USERNAME=$(php -r "include('$CONFIG_PATH'); echo DB_USERNAME;")
            DATABASE_PASSWORD=$(php -r "include('$CONFIG_PATH'); echo DB_PASSWORD;")
            DATABASE_HOSTNAME=$(php -r "include('$CONFIG_PATH'); echo DB_HOST;")
            ;;
    esac
fi

#----------------------------------------------------------#
#                  Strip user-prefix from names            #
#----------------------------------------------------------#
if [[ -n "${DATABASE_NAME:-}" ]]; then
    DATABASE_NAME_WITHOUT_PREFIX="${DATABASE_NAME#${USER}_}"
fi
if [[ -n "${DATABASE_USERNAME:-}" ]]; then
    DATABASE_USERNAME_WITHOUT_PREFIX="${DATABASE_USERNAME#${USER}_}"
fi

#----------------------------------------------------------#
#                        Output vars                       #
#----------------------------------------------------------#
echo "DATABASE_NAME_WITHOUT_PREFIX=${DATABASE_NAME_WITHOUT_PREFIX}"
echo "DATABASE_USERNAME_WITHOUT_PREFIX=${DATABASE_USERNAME_WITHOUT_PREFIX}"
echo "DATABASE_NAME=${DATABASE_NAME}"
echo "DATABASE_USERNAME=${DATABASE_USERNAME}"
echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}"
echo "DATABASE_HOSTNAME=${DATABASE_HOSTNAME}"
echo "CONFIG_PATH=${CONFIG_PATH}"
echo "CMS_TYPE=${CMS_TYPE}"
echo "SITE_FOLDER=${SITE_FOLDER}"
echo "SUBFOLDER=${SUBFOLDER}"
echo "USER=${USER}"

#----------------------------------------------------------#
#                          Logging                         #
#----------------------------------------------------------#
log_event "$OK" "$ARGUMENTS"
